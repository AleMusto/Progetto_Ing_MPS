{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alessandro\\\\Code\\\\web-projects\\\\test-site\\\\Progetto Ingegneria\\\\frontend\\\\src\\\\pages\\\\Login.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { storeUser, userData } from '../helpers';\nimport { useNavigate } from 'react-router-dom';\nimport LoginForm from '../View/LoginForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n  const [message, setMessage] = useState(null);\n  const navigate = useNavigate();\n\n  // se l'utente è loggato, viene reindirizzato alla home\n  useEffect(() => {\n    const user = userData();\n    if (user !== null && user !== void 0 && user.jwt) navigate('/');\n  }, [navigate]);\n  const login = async event => {\n    event.preventDefault();\n    setMessage(null);\n\n    // prende tutti i valori del form e li trasforma in un oggetto\n    const formData = new FormData(event.target);\n    const jsonData = Object.fromEntries(formData);\n\n    // richiesta POST\n    const reqLoginOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(jsonData)\n    };\n    const req = await fetch('http://localhost:1337/api/auth/local', reqLoginOptions);\n    const res = await req.json();\n\n    // gestione errori\n    if (res.error) {\n      setMessage(res.error.message);\n      return;\n    }\n\n    // se l'utente ha effettuato il login, viene memorizzato l'utente nel localStorage\n    if (res.jwt && res.user) {\n      const userId = res.user.id;\n      const role = await getRole(res.jwt);\n      if (role) {\n        storeUser({\n          ...res,\n          role,\n          userId\n        });\n        setMessage(`You are logged in as ${res.user.username}, with role ${role}`);\n        navigate(0);\n      } else setMessage('Error getting role');\n    }\n\n    //console.log(res)\n  };\n  const getRole = async jwt => {\n    var _res$role;\n    const reqRoleOptions = {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + jwt\n      }\n    };\n    const req = await fetch('http://localhost:1337/api/users/me?populate=*', reqRoleOptions);\n    const res = await req.json();\n\n    // gestione errori\n    if (res.error) {\n      setMessage(res.error.message);\n      return '';\n    }\n    if ((_res$role = res.role) !== null && _res$role !== void 0 && _res$role.type) return res.role.type;\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(LoginForm, {\n    message: message,\n    login: login\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"K/aUfsSelKnQxEQHSXc/YBAxURk=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useEffect","useState","storeUser","userData","useNavigate","LoginForm","jsxDEV","_jsxDEV","Login","_s","message","setMessage","navigate","user","jwt","login","event","preventDefault","formData","FormData","target","jsonData","Object","fromEntries","reqLoginOptions","method","headers","body","JSON","stringify","req","fetch","res","json","error","userId","id","role","getRole","username","_res$role","reqRoleOptions","Accept","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Alessandro/Code/web-projects/test-site/Progetto Ingegneria/frontend/src/pages/Login.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { storeUser, userData } from '../helpers';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport LoginForm from '../View/LoginForm';\r\n\r\nexport default function Login() {\r\n  const [message, setMessage] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // se l'utente è loggato, viene reindirizzato alla home\r\n  useEffect(() => {\r\n    const user = userData();\r\n\r\n    if (user?.jwt) navigate('/');\r\n  }, [navigate]);\r\n\r\n  const login = async (event) => {\r\n    event.preventDefault();\r\n    setMessage(null);\r\n\r\n    // prende tutti i valori del form e li trasforma in un oggetto\r\n    const formData = new FormData(event.target);\r\n    const jsonData = Object.fromEntries(formData);\r\n\r\n    // richiesta POST\r\n    const reqLoginOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(jsonData)\r\n    };\r\n\r\n    const req = await fetch('http://localhost:1337/api/auth/local', reqLoginOptions);\r\n    const res = await req.json();\r\n\r\n    // gestione errori\r\n    if (res.error) {\r\n      setMessage(res.error.message);\r\n      return;\r\n    }\r\n\r\n    // se l'utente ha effettuato il login, viene memorizzato l'utente nel localStorage\r\n    if (res.jwt && res.user) {\r\n      const userId = res.user.id;\r\n      const role = await getRole(res.jwt);\r\n      if (role) {\r\n        storeUser({...res, role, userId});\r\n        setMessage(`You are logged in as ${res.user.username}, with role ${role}`);\r\n        navigate(0);\r\n      } else setMessage('Error getting role');\r\n    }\r\n    \r\n    //console.log(res)\r\n  };\r\n\r\n  const getRole = async (jwt) => {\r\n    const reqRoleOptions = {\r\n      method: 'GET',\r\n      headers: {\r\n        Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + jwt\r\n      }\r\n    };\r\n\r\n    const req = await fetch('http://localhost:1337/api/users/me?populate=*', reqRoleOptions);\r\n    const res = await req.json();\r\n    \r\n    // gestione errori\r\n    if (res.error) {\r\n      setMessage(res.error.message);\r\n      return '';\r\n    }\r\n\r\n    if (res.role?.type) return res.role.type;\r\n\r\n    return '';\r\n  }\r\n\r\n  return (\r\n    <LoginForm message={message} login={login} />\r\n  )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}