{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alessandro\\\\Code\\\\web-projects\\\\test-site\\\\Progetto Ingegneria\\\\frontend\\\\src\\\\pages\\\\CompilaPattern.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PatternForm from '../View/PatternForm';\nimport { userData } from '../helpers';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction formatBody(formData, filtri, userId, stato, idPatternAssociato) {\n  const jsonData = Object.fromEntries(formData);\n  const filtriConIdCampi = {};\n  filtri.forEach(filtro => {\n    filtriConIdCampi[filtro.label] = filtro.checkedItems.map(item => item.id_campo);\n  });\n  const id = idPatternAssociato || null;\n  let statoBody;\n  if (stato === 'Aggiungi') {\n    statoBody = {\n      id: 3\n    };\n  } else if (stato === 'Modifica') {\n    statoBody = {\n      id: 1\n    };\n  }\n  const body = {\n    data: {\n      user: userId,\n      stato: statoBody,\n      titolo: jsonData.titolo,\n      descrizione: jsonData.descrizione,\n      contesto: jsonData.contesto,\n      esempio: jsonData.esempio,\n      pattern: id,\n      ...filtriConIdCampi\n    }\n  };\n  return body;\n}\nasync function handlePost(event, patternData, setMessage) {\n  event.preventDefault();\n  setMessage(null);\n  const {\n    formData,\n    filtri,\n    userId,\n    stato,\n    jwt,\n    singlePatternId\n  } = patternData;\n  const body = formatBody(formData, filtri, userId, stato, singlePatternId);\n  const reqLoginOptions = {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + jwt\n    },\n    body: JSON.stringify(body)\n  };\n  const req = await fetch('http://localhost:1337/api/pattern-buffers', reqLoginOptions);\n  const res = await req.json();\n  if (res.error) {\n    setMessage(res.error.message);\n    return;\n  }\n  if (res.data) {\n    setMessage('Pattern inviato con successo');\n  }\n}\nexport default function CompilaPattern({\n  filtri,\n  singlePattern,\n  stato\n}) {\n  _s();\n  const [message, setMessage] = useState(null);\n  const {\n    jwt,\n    userId\n  } = userData();\n  const sendPattern = async event => {\n    if (window.confirm('Sei sicuro di voler inviare il pattern?')) {\n      const formData = new FormData(event.target);\n      const patternData = {\n        formData,\n        filtri,\n        userId,\n        stato,\n        jwt,\n        singlePatternId: singlePattern === null || singlePattern === void 0 ? void 0 : singlePattern.id\n      };\n      await handlePost(event, patternData, setMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PatternForm, {\n      sendPattern: sendPattern,\n      message: message,\n      singlePattern: singlePattern,\n      stato: stato\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(CompilaPattern, \"oxT8SEz5FIjvFP5ix50Ku0sapH4=\");\n_c = CompilaPattern;\nCompilaPattern.propTypes = {\n  filtri: PropTypes.array.isRequired,\n  singlePattern: PropTypes.object.isRequired,\n  stato: PropTypes.string.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"CompilaPattern\");","map":{"version":3,"names":["React","useState","PatternForm","userData","PropTypes","jsxDEV","_jsxDEV","formatBody","formData","filtri","userId","stato","idPatternAssociato","jsonData","Object","fromEntries","filtriConIdCampi","forEach","filtro","label","checkedItems","map","item","id_campo","id","statoBody","body","data","user","titolo","descrizione","contesto","esempio","pattern","handlePost","event","patternData","setMessage","preventDefault","jwt","singlePatternId","reqLoginOptions","method","headers","Accept","JSON","stringify","req","fetch","res","json","error","message","CompilaPattern","singlePattern","_s","sendPattern","window","confirm","FormData","target","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","array","isRequired","object","string","$RefreshReg$"],"sources":["C:/Users/Alessandro/Code/web-projects/test-site/Progetto Ingegneria/frontend/src/pages/CompilaPattern.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PatternForm from '../View/PatternForm';\r\nimport { userData } from '../helpers';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction formatBody(formData, filtri, userId, stato, idPatternAssociato) {\r\n  const jsonData = Object.fromEntries(formData);\r\n\r\n  const filtriConIdCampi = {};\r\n  filtri.forEach(filtro => {\r\n    filtriConIdCampi[filtro.label] = filtro.checkedItems.map(item => item.id_campo);\r\n  });\r\n\r\n  const id = idPatternAssociato || null;\r\n  let statoBody;\r\n\r\n  if (stato === 'Aggiungi') {\r\n    statoBody = { id: 3 };\r\n  } else if (stato === 'Modifica') {\r\n    statoBody = { id: 1 };\r\n  }\r\n\r\n  const body = {\r\n    data: {\r\n      user: userId,\r\n      stato: statoBody,\r\n      titolo: jsonData.titolo,\r\n      descrizione: jsonData.descrizione,\r\n      contesto: jsonData.contesto,\r\n      esempio: jsonData.esempio,\r\n      pattern: id,\r\n      ...filtriConIdCampi\r\n    }\r\n  };\r\n\r\n  return body;\r\n}\r\n\r\nasync function handlePost(event, patternData, setMessage) {\r\n  event.preventDefault();\r\n  setMessage(null);\r\n\r\n  const { formData, filtri, userId, stato, jwt, singlePatternId } = patternData;\r\n  const body = formatBody(formData, filtri, userId, stato, singlePatternId);\r\n\r\n  const reqLoginOptions = {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + jwt\r\n    },\r\n    body: JSON.stringify(body)\r\n  };\r\n\r\n  const req = await fetch('http://localhost:1337/api/pattern-buffers', reqLoginOptions);\r\n  const res = await req.json();\r\n\r\n  if (res.error) {\r\n    setMessage(res.error.message);\r\n    return;\r\n  }\r\n\r\n  if (res.data) {\r\n    setMessage('Pattern inviato con successo');\r\n  }\r\n}\r\n\r\nexport default function CompilaPattern({ filtri, singlePattern, stato }) {\r\n  const [message, setMessage] = useState(null);\r\n  const { jwt, userId } = userData();\r\n\r\n  const sendPattern = async (event) => {\r\n    if (window.confirm('Sei sicuro di voler inviare il pattern?')) {\r\n      const formData = new FormData(event.target);\r\n      const patternData = {\r\n        formData,\r\n        filtri,\r\n        userId,\r\n        stato,\r\n        jwt,\r\n        singlePatternId: singlePattern?.id\r\n      };\r\n      await handlePost(event, patternData, setMessage);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PatternForm sendPattern={sendPattern} message={message} singlePattern={singlePattern} stato={stato} />\r\n    </div>\r\n  );\r\n}\r\n\r\nCompilaPattern.propTypes = {\r\n  filtri: PropTypes.array.isRequired,\r\n  singlePattern: PropTypes.object.isRequired,\r\n  stato: PropTypes.string.isRequired\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}