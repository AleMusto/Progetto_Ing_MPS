{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alessandro\\\\Code\\\\web-projects\\\\test-site\\\\Progetto Ingegneria\\\\frontend\\\\src\\\\pages\\\\DettagliPattern.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\nimport PatternSingolo from '../View/PatternSingolo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PATTERN = gql`\n  query getPattern($id: ID!) {\n    pattern(id: $id) {\n      data {\n        id\n        attributes {\n          titolo,\n          descrizione,\n          contesto,\n          esempio,\n          strategias {\n            data {\n              id\n              attributes {\n                nome\n              }\n            }\n          },\n          collocazione_mvcs {\n            data {\n              id\n              attributes {\n                nome\n              }\n            }\n          },\n          fase_isos {\n            data {\n              id\n              attributes {\n                nome\n              }\n            }\n          },\n          articolo_gdprs {\n            data {\n              id\n              attributes {\n                nome\n                link\n              }\n            }\n          },\n          principio_pbds {\n            data {\n              id\n              attributes {\n                nome\n              }\n            }\n          },\n          categoria_owasps {\n            data {\n              id\n              attributes {\n                nome\n              }\n            }\n          },\n          cwe_associata_a_categoria_owasps {\n            data {\n              id\n              attributes {\n                nome\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nfunction splitExamples(text) {\n  if (text === \"NA\") return [\"No examples\"];\n\n  // Divide il testo in base alle occorrenze di 'Example'\n  let examples = text.split('Example');\n\n  // Rimuovi il primo elemento dell'array che è una stringa vuota\n  examples.shift();\n\n  // Aggiungi 'Example' all'inizio di ogni elemento dell'array\n  examples = examples.map(example => 'Example ' + example.trim());\n  return examples;\n}\nexport default function DettagliPattern() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(PATTERN, {\n    variables: {\n      id: id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 21\n  }, this);\n  let pattern = data.pattern.data.attributes;\n  let esempi = splitExamples(pattern.esempio);\n  return /*#__PURE__*/_jsxDEV(PatternSingolo, {\n    id: id,\n    pattern: pattern,\n    esempi: esempi\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(DettagliPattern, \"NJ4mHzrs5oNVJvGQMnCfegDud9c=\", false, function () {\n  return [useParams, useQuery];\n});\n_c = DettagliPattern;\nvar _c;\n$RefreshReg$(_c, \"DettagliPattern\");","map":{"version":3,"names":["React","useParams","useQuery","gql","PatternSingolo","jsxDEV","_jsxDEV","PATTERN","splitExamples","text","examples","split","shift","map","example","trim","DettagliPattern","_s","id","data","error","loading","variables","children","fileName","_jsxFileName","lineNumber","columnNumber","message","pattern","attributes","esempi","esempio","_c","$RefreshReg$"],"sources":["C:/Users/Alessandro/Code/web-projects/test-site/Progetto Ingegneria/frontend/src/pages/DettagliPattern.js"],"sourcesContent":["import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport PatternSingolo from '../View/PatternSingolo'\r\n\r\nconst PATTERN = gql`\r\n  query getPattern($id: ID!) {\r\n    pattern(id: $id) {\r\n      data {\r\n        id\r\n        attributes {\r\n          titolo,\r\n          descrizione,\r\n          contesto,\r\n          esempio,\r\n          strategias {\r\n            data {\r\n              id\r\n              attributes {\r\n                nome\r\n              }\r\n            }\r\n          },\r\n          collocazione_mvcs {\r\n            data {\r\n              id\r\n              attributes {\r\n                nome\r\n              }\r\n            }\r\n          },\r\n          fase_isos {\r\n            data {\r\n              id\r\n              attributes {\r\n                nome\r\n              }\r\n            }\r\n          },\r\n          articolo_gdprs {\r\n            data {\r\n              id\r\n              attributes {\r\n                nome\r\n                link\r\n              }\r\n            }\r\n          },\r\n          principio_pbds {\r\n            data {\r\n              id\r\n              attributes {\r\n                nome\r\n              }\r\n            }\r\n          },\r\n          categoria_owasps {\r\n            data {\r\n              id\r\n              attributes {\r\n                nome\r\n              }\r\n            }\r\n          },\r\n          cwe_associata_a_categoria_owasps {\r\n            data {\r\n              id\r\n              attributes {\r\n                nome\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nfunction splitExamples(text) {\r\n  if (text === \"NA\") return [\"No examples\"]\r\n\r\n  // Divide il testo in base alle occorrenze di 'Example'\r\n  let examples = text.split('Example')\r\n  \r\n  // Rimuovi il primo elemento dell'array che è una stringa vuota\r\n  examples.shift()\r\n  \r\n  // Aggiungi 'Example' all'inizio di ogni elemento dell'array\r\n  examples = examples.map(example => 'Example ' + example.trim())\r\n  \r\n  return examples\r\n}\r\n\r\nexport default function DettagliPattern() {\r\n  const { id } = useParams();\r\n  const { data, error, loading } = useQuery(PATTERN,\r\n    { variables: {id: id} \r\n  })\r\n\r\n  if (loading) return <p>Loading...</p>\r\n  if (error) return <p>Error: {error.message}</p>\r\n  \r\n  let pattern = data.pattern.data.attributes\r\n  let esempi = splitExamples(pattern.esempio)\r\n\r\n  return (\r\n    <PatternSingolo id={id} pattern={pattern} esempi={esempi} />\r\n  )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAC9C,OAAOC,cAAc,MAAM,wBAAwB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGJ,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASK,aAAaA,CAACC,IAAI,EAAE;EAC3B,IAAIA,IAAI,KAAK,IAAI,EAAE,OAAO,CAAC,aAAa,CAAC;;EAEzC;EACA,IAAIC,QAAQ,GAAGD,IAAI,CAACE,KAAK,CAAC,SAAS,CAAC;;EAEpC;EACAD,QAAQ,CAACE,KAAK,CAAC,CAAC;;EAEhB;EACAF,QAAQ,GAAGA,QAAQ,CAACG,GAAG,CAACC,OAAO,IAAI,UAAU,GAAGA,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;EAE/D,OAAOL,QAAQ;AACjB;AAEA,eAAe,SAASM,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACxC,MAAM;IAAEC;EAAG,CAAC,GAAGjB,SAAS,CAAC,CAAC;EAC1B,MAAM;IAAEkB,IAAI;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGnB,QAAQ,CAACK,OAAO,EAC/C;IAAEe,SAAS,EAAE;MAACJ,EAAE,EAAEA;IAAE;EACtB,CAAC,CAAC;EAEF,IAAIG,OAAO,EAAE,oBAAOf,OAAA;IAAAiB,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACrC,IAAIP,KAAK,EAAE,oBAAOd,OAAA;IAAAiB,QAAA,GAAG,SAAO,EAACH,KAAK,CAACQ,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAE/C,IAAIE,OAAO,GAAGV,IAAI,CAACU,OAAO,CAACV,IAAI,CAACW,UAAU;EAC1C,IAAIC,MAAM,GAAGvB,aAAa,CAACqB,OAAO,CAACG,OAAO,CAAC;EAE3C,oBACE1B,OAAA,CAACF,cAAc;IAACc,EAAE,EAAEA,EAAG;IAACW,OAAO,EAAEA,OAAQ;IAACE,MAAM,EAAEA;EAAO;IAAAP,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEhE;AAACV,EAAA,CAfuBD,eAAe;EAAA,QACtBf,SAAS,EACSC,QAAQ;AAAA;AAAA+B,EAAA,GAFnBjB,eAAe;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}